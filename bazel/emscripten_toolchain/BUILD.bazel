load(":crosstool.bzl", "emscripten_cc_toolchain_config")

package(default_visibility = ["//visibility:public"])

# Name depends on rules_nodejs version being used.
# https://github.com/emscripten-core/emsdk/issues/1020
# https://github.com/bazelbuild/rules_nodejs/issues/3375
node_files = "@nodejs_host//:node_files" if existing_rule("@nodejs_host//:node_files") else "@nodejs//:node_files"

filegroup(
    name = "all_files",
    srcs = [
        ":ar_files",
        ":compiler_files",
        ":linker_files",
    ],
)

filegroup(
    name = "common_files",
    srcs = [
        "emscripten_config",
        "env.bat",
        "env.sh",
        node_files,
    ],
)

filegroup(
    name = "compiler_files",
    srcs = [
        "emcc.bat",
        "emcc.sh",
        ":common_files",
        "@emsdk//:compiler_files",
    ],
)

filegroup(
    name = "linker_files",
    srcs = [
        "emcc_link.bat",
        "emcc_link.sh",
        "link_wrapper.py",
        ":common_files",
        "@emsdk//:linker_files",
    ],
)

filegroup(
    name = "ar_files",
    srcs = [
        "emar.bat",
        "emar.sh",
        ":common_files",
        "@emsdk//:ar_files",
    ],
)

filegroup(name = "empty")

# dlmalloc.bc is implictly added by the emscripten toolchain
cc_library(name = "malloc")

emscripten_cc_toolchain_config(
    name = "wasm32_cc_toolchain_config",
    cpu = "wasm32",
    em_config = "emscripten_config",
    emscripten_binaries = "@emsdk//:compiler_files",
    script_extension = select({
        "@bazel_tools//src/conditions:host_windows": "bat",
        "//conditions:default": "sh",
    }),
)

emscripten_cc_toolchain_config(
    name = "wasm64_cc_toolchain_config",
    cpu = "wasm64",
    em_config = "emscripten_config",
    emscripten_binaries = "@emsdk//:compiler_files",
    script_extension = select({
        "@bazel_tools//src/conditions:host_windows": "bat",
        "//conditions:default": "sh",
    }),
)

cc_toolchain(
    name = "wasm32_cc_toolchain",
    all_files = ":all_files",
    ar_files = ":ar_files",
    compiler_files = ":compiler_files",
    dwp_files = ":empty",
    linker_files = ":linker_files",
    objcopy_files = ":empty",
    strip_files = ":empty",
    toolchain_config = ":wasm32_cc_toolchain_config",
    toolchain_identifier = "emscripten-wasm",
)

cc_toolchain(
    name = "wasm64_cc_toolchain",
    all_files = ":all_files",
    ar_files = ":ar_files",
    compiler_files = ":compiler_files",
    dwp_files = ":empty",
    linker_files = ":linker_files",
    objcopy_files = ":empty",
    strip_files = ":empty",
    toolchain_config = ":wasm64_cc_toolchain_config",
    toolchain_identifier = "emscripten-wasm",
)

toolchain(
    name = "cc_wasm32_toolchain",
    target_compatible_with = [
        "@platforms//cpu:wasm32",
    ],
    toolchain = ":wasm32_cc_toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

toolchain(
    name = "cc_wasm64_toolchain",
    target_compatible_with = [
        "@platforms//cpu:wasm64",
    ],
    toolchain = ":wasm64_cc_toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

py_binary(
    name = "wasm_binary",
    srcs = ["wasm_binary.py"],
)
